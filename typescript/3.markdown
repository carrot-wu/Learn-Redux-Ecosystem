>收集在学习`深入浅出TypeScript：从基础知识到类型编程`小册过程中所做的一些笔记，第3期为`infer关键字`。
## infer关键字
`infer`最早出现在此 PR 中，表示在`extends`条件语句中**待推断**的类型变量。在定义上，我个人认为关键字是**待推断**这三个字。
个人认为表示`infer`的类型无法得到但是能够ts的类型推断推导出来。感觉上与泛型有点类似，提前声明一个未知的变量,不过不同的是泛型在使用时必须传值因此可以确定具体类型，`infer`至始至终都无法得知具体类型只能通过类型推断来推导出来。
干巴巴说没啥用，上个栗子看下：
```ts
// infer P 表示待推断的类型
type ParamType<T> = T extends (param: infer P) => any ? P : T;
```
上面的类型表示如果传入的泛型`T`能赋值给函数类型`(param: infer P) => any`，那么就返回函数类型化`(param: infer P) => any`中的`P`,也就是函数的传参类型`param`。不然的话返回泛型T。
```ts
interface User {
  name: string;
  age: number;
}
type ParamType<T> = T extends (param: infer P) => any ? P : T;
type Func = (user: User) => void;

type Param = ParamType<Func>; // Param = User
type AA = ParamType<string>; // string
```
### ReturnType 提取函数返回类型
同理，我们可以把上面的待推断类型`inter P`用在函数返回值上，实现一个接受函数泛型返回函数泛型返回值的类型工具，这个类型工具其实也就是ts内置类型ReturnType的实现。
```ts

type MyReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer P ? P : any

interface Fun {
    (params: string) : string | number
}
type FunReturnType1 = MyReturnType<Fun> // string | number

type FunReturnType2 = ReturnType<Fun> // string | number
```
### ConstructorParameters 提取构造函数中参数（实例）类型
`infer`同样可以使用在提取类的构造函数返回类型上，构造函数一般用两种类型来表示.
```ts
//类表示
class A {
    public constructor(paramsA: string, paramsB: number | boolean) { }
}
// 函数表示
interface B {
    new (paramsA: string, paramsB: number | boolean) : any
}
```
因此我们可以实现一个就收构建函数泛型返回构造函数参数类型的类型工具，这个类型工具其实也是ts内置原型`ConstructorParameters`的实现
```ts
type MyConstructorParameters<T extends new (...args: any[]) => any> = T extends new (...args: infer P) => any ?
P
:
never

type AParamsType1 = MyConstructorParameters<typeof A> // [string, number | boolean]
type AParamsType2 = ConstructorParameters<typeof A> // [string, number | boolean]

type BParamsType1 = MyConstructorParameters<B> // [(a: string) => boolean, number | boolean]
type BParamsType2 = ConstructorParameters<B> // [(a: string) => boolean, number | boolean]
```
1. 其中`T extends new (...args: any[]) => any`是泛型约束，约束传入的泛型T必须是构造函数。
2. `T extends new (...args: infer P) => any`后续的`infer P`推断类型P来获取构造函数的参数类型。

## infer的骚操作
>以下的内容摘自《深入理解typescript》

至此，相信你已经对 infer 已有基本了解，我们来看看一些使用它的「骚操作」：
1. tuple转union(元组转联合类型) ，如：`[string, number] -> string | number`
解答之前，我们需要了解 tuple 类型在一定条件下，是可以赋值给数组类型：
```ts
type TTuple = [string, number];
type TArray = Array<string | number>;

type Res = TTuple extends TArray ? true : false; // true
type ResO = TArray extends TTuple ? true : false; // false
```
因此，在配合 infer 时，这很容做到：
```ts
type ElementOf<T> = T extends Array<infer E> ? E : never;
type TTuple = [string, number];
type ToUnion = ElementOf<TTuple>; // string | number
```
2. union 转 intersection(联合转交叉类型)，如：`string | number -> string & number`
```ts
type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;

type Result = UnionToIntersection<T1 | T2>; // T1 & T2
```
## 综合应用
> 接下来的内容呢，是我在看一个知乎关于`react hook`的使用所整理处理的依次ts高级类型的综合应用。  

知乎上关于[**如何去合理使用 React hook？**](https://www.zhihu.com/question/357020049)的回答。

其中一个通用封装hooks的hook方法按答主是这样子的。  
```js
export const useMethods = (initialValue, methods) => {
    const [value, setValue] = useState(initialValue);
    const boundMethods = useMemo(
        () => Object.entries(methods).reduce(
            (methods, [name, fn]) => {
                const method = (...args) => {
                    setValue(value => fn(value, ...args));
                };
                methods[name] = method;
                return methods;
            },
            {}
        ),
        [methods]
    );
    return [value, boundMethods];
};
```  
于是呢，我就想着换成ts版本的写法会怎么样呢。接下来是我第一版的写法。  

### 第一版
```ts
// 对传入的methods进行约束的类型
interface Methods<T> {
  [keys: string]: (value: T, ...args: any[]) => T;
}

// 返回对象为一个新的对象函数
type ReturnMethods = {
  [keys: string]: (...args: any[]) => void;
}
function useMethods<T, K extends Methods<T>>(
  initState: T,
  methods: K
): [T, ReturnMethods] {
  const [value, setValue] = useState<T>(() => initState);
  const boundMethods = Object.keys(methods).reduce((newMethods, name) => {
    const fn = methods[name];
    newMethods[name] = (...args: any[]) => {
      setValue(value => fn(value, ...args));
    }
    return newMethods;
  }, {} as ReturnMethods);
  return [value, boundMethods];
}

interface NumberMethods{
  increment: (value: number) => number
  decrement: (value: number) => number
}
const methods:Methods<number> = {
  increment(value) {
    return value + 1;
  },
  decrement(value) {
    return value - 1;
  },
  addNumber(value, num: number){
    return value + num
  }
}

```
**第一版能够传入约束的对象，但是返回的`returnMthods`方法没有推导出来声明是methods的`increment descrement addNumber`方法**。所以我又写了第二版

### 第二版
从上文不难看出，传入的methods方法和返回的returnMethods其实是有联系的。`methods`和`returnMethods`中key值时一一对应的，唯一不同的就是属性值返回的是一个新的函数，这个函数的参数不用传value值。所以可以大致得出以下思路：
1. 返回相同的key可以通过映射类型`[P in keyof U]`进行映射获取
2. 剔除掉value的函数参数类型我们可以通过`infer`关键字进行获取  

```ts
interface Methods<T> {
  [keys: string]: (value: T, ...args: any[]) => T;
}

// 获取除了state本身自外的其他函数参数
type GetExtraParams<U, T> = U extends (value: T, ...args: infer P) => void ? P : never

// 映射类型生成返回的函数对象
type ReturnMethods<U, T> = {
  [P in keyof U]: (...args: GetExtraParams<U[P], T>) => void;
}

function useReducerHook<T, K extends Methods<T>>(
  initState: T,
  methods: K
): [T, ReturnMethods<K, T>] {
  const [value, setValue] = useState<T>(() => initState);
  const methodsTypes = Object.keys(methods) as Array<keyof K>
  const boundMethods = methodsTypes.reduce((newMethods, name) => {
    const fn = methods[name];
    newMethods[name] = (...args: any[]) => {
      setValue(value => fn(value, ...args));
    }
    return newMethods;
  }, {} as ReturnMethods<K, T>);
  return [value, boundMethods];
}

interface NumberMethods{
  increment: (value: number) => number
  decrement: (value: number) => number
  addNumber: (value: number, num:number) => number
}
//const methods:Methods<number>
const methods = {
  increment(value: number) {
    return value + 1;
  },
  decrement(value: number) {
    return value - 1;
  },
  addNumber(value: number, num: number){
    return value + num
  }
}
const [value, hhhh] = useReducerHook(1, methods);

hhhh.addNumber('123')
//报错 而且也有代码提示
// 看似很完美 其实还有坑 可以看下methods的类型声明 要是换成NumberMethods 或者 Methods<number>呢
```  

这一版我们做了很大的改进，现在返回的`returnMethods`已经有了代码提示，而且对于参数也进行了限制，看似非常完美但是其实有个很大的坑。具体看一下methods的类型声明，我是直接写在变量声明时。    

如果我们换成了类型声明换成上面的`NumberMethods`或者`Methods<number>`就会出问题了。  

1. 换成`NumberMethods`有个缺少索引签名的报错，函数参数类型丢失了没有进行约束（可以通过 `NumberMethods extends Methods<Number>`解决）
2. 换成`Methods<number>`干脆啥都没有了，连函数`addNumber`提示都丢失了。  

#### 问题
问题所在就是因为我们在约束Methods时用的是**索引签名**。  索引签名的名称（如：`{ [index: string]: { message: string } }` 里的 index ）除了可读性外，并没有任何意义。

```ts
interface Methods<T> {
  [keys: string]: (value: T, ...args: any[]) => T;
}

type ReturnMethods<U, T> = {
    // 索引签名会导致这里的P永远是string类型
  [P in keyof U]: (...args: GetExtraParams<U[P], T>) => void;
}
```  

对于`NumberMethods`,可以通过 `NumberMethods extends Methods<Number>`解决的原因在于，`NumberMethods`缺少索引签名，所以通过extends的方式加上索引签名。虽说这样子可以解决，但是我拒绝以后写类型都要加上extends。

### 第三版
从上面看出，罪魁祸首就是索引签名，所以我得解决办法依托于如果把索引签名干掉同时又对Methods进行函数约束。万般尝试下，我发现了`never`类型的解决办法。

```ts
// interface Methods<T> {
//   [keys: string]: (value: T, ...args: any[]) => T;
// }
// 把Methods替换成了FilterMethods

// 筛选出符合函数的类型
type FilterMethods<K, U> = {
  [P in keyof K]: K[P] extends (value: U, ...args: any[]) => U ? K[P] : never
}
```  
**这样子呢，即时传入不符合的函数类型最终会返回never类型，那么就会有报错提示，同时也把索引签名干掉了。很完美**
