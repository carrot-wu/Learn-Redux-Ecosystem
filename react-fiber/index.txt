最新的理解
写的非常棒的fiber理解文章 https://react.iamkasong.com/preparation/newConstructure.html#react16%E6%9E%B6%E6%9E%84

在react16之前 react分为两个阶段
1 reconciler 协调器 这个阶段的作用主要是把转化jsx为虚拟dom，并且比对虚拟dom进行differ 然后交给render渲染器进行渲染
2 render 渲染器 就是react.rednderDom 把比对好的虚拟dom转化为dom节点插入到浏览器环境中

这种情况下 两个步骤的执行流程都是同步的，并且虚拟dom渲染成真实dom的过程是递归这样子导致js执行的话会卡
因为一阵需要做一些事

所以诞生了fiber概念 其实就是时间分片

在react16以后 分成了三个阶段
1. schedule 调度器 给任务分优先级并且进行调度，高优先级的任务优先执行，低优先级任务往后。高优先级的任务还会直接进行插入
2. reconciler 协调器 生成相应的fiber树（链表结构），并且根据根据differ生成新的fiber树并且打上相对应的effect。简单说还是处理虚拟dom，注意的是
这一过程中因为fiber是双向链表结构，因此变成了循环。在循环的过程中，会判断帧是否还有多余的时间处理，没有的话会直接进行打断（高优先级的任务还会直接进行插入）
得益于fiber双向链表结构（sibling child return），因此能够随时打断并且重新回到打断的地方继续。
3.  render渲染器，根据上方生成的fiber工作节点根据effect的tag标签进行渲染操作到浏览器中，这一步不能被打断会执行下去

#Fiber的结构
你可以从这里看到Fiber节点的属性定义 (opens new window)。虽然属性很多，但我们可以按三层含义将他们分类来看

function FiberNode(
  tag: WorkTag,
  pendingProps: mixed,
  key: null | string,
  mode: TypeOfMode,
) {
  // 作为静态数据结构的属性
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null;

  // 用于连接其他Fiber节点形成Fiber树
  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  // 作为动态的工作单元的属性
  this.pendingProps = pendingProps;
  this.memoizedProps = null; fiber的props
  this.updateQueue = null; fiber中的useEffect组成的双向链表
  this.memoizedState = null;fiber中的hook链表
  this.dependencies = null;

  this.mode = mode;

  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  // 调度优先级相关
  this.lanes = NoLanes;
  this.childLanes = NoLanes;

  // 指向该fiber在另一次更新时对应的fiber
  this.alternate = null;
}

fiber 架构把渲染分成了额两个阶段 一个是render和render之前称作为协调（render 阶段） render之后的称为commit阶段
render阶段在新的fiber架构下可能会出现多次打断的情况
原先的react渲染是基于调用栈的数据结构去渲染的 每次setState时 组件都会依照栈的形式从头到尾全部处理完才会进行渲染 （同步递归 一路向下 ）
所以对于一些用时较长的执行函数或者一些长列表 如果渲染的时间超过16ms就会产生卡顿。
但是每一帧都只有16ms 如果超出时间 动画就会卡顿

其中 schedule以及reconciler阶段都称为render阶段 rendener渲染器称为渲染阶段

## reconciler 协调器中是如何做 dom树的构建以及更新的呢 ----双缓存技术

a: 旧的dom节点 b：新的dom节点 在b操作完diff之后直接渲染到浏览器 就不会有渲染跳来跳去的效果 这就是双缓存技术

fiber的更新也是如此。当前的fiber树叫做currentFibertree  内存总工作的是workinprogessFiber就是构建中的fiber

workinfiber构建完成之后 就会交换


## fiber的执行流程 render阶段

前面说了本质上虚拟dom变成了fiber节点，所以可以归结为如何diff出新的fiber节点

1. beginwork。“递阶段” 深度优先遍历处理每一个循环到的节点，如果有子节点的话继续一直遍历直到没有子节点。
2. 这时候会执行completework方法处理，遇到兄弟节点的话继续执行3的步骤。不是的话返回父节点继续执行completework。继续递归
3. 遇到兄弟节点。重新执行12步骤。直到rootFiber执行完

beginWork 还有completework其实都是在进行differ阶段 生成一些diff的edffect以及相应的tag操作

接下来就回到fiber生成真实dom节点的 commitwork阶段（commit阶段）

## commit阶段

## differ函数
1: 单节点： keytype相同才复用，进入到props的修改进行diff。key type一个不同就直接删除重建

2. 多节点

========================
# 状态更新的整个流程

## 触发状态更新
1. ReactDOM.render
2. this.setState
3. this.forceUpdate
4. useState
5. useReducer

## 创建updateAction

## 交有schedule进行调度，当前任务能够进入协调器中国

## reconciler协调器进行， 从当前rootFiber开始以深度优先遍历的形式对fiber节点调用beginwork以及completework方法，生成新的workinfiberRoot
在beginworj以及completework中，进行diff对要修改或者变化的fiber节点打上相关的tag以及effect
以及对需要的更新打上tag以及effect
beginwork。
completework阶段

## 交有renderer渲染器进行渲染到真是dom节点 commit阶段

## 完整流程
触发状态更新（根据场景调用不同方法）
    |
    |
    v
创建Update对象（接下来三节详解）
    |
    |
    v
从fiber到root（`markUpdateLaneFromFiberToRoot`）
    |
    |
    v
调度更新（`ensureRootIsScheduled`）
    |
    |
    v
render阶段（`performSyncWorkOnRoot` 或 `performConcurrentWorkOnRoot`）
    |
    |
    v
commit阶段（`commitRoot`）

## update

触发刷新的操作都会创建update的action对象 放在fiber的updateQueue上

## Scheduler调度器的实现
主要是两方面: 
时间分片 以及 优先级调度

### 时间切片的原理
时间切片的原理是基于原生api requestIdleCallback 不过有api性问题，所以react官方通过messageChannel以及setTimeout进行了proliffy
==============
### 浏览器一针的工作
1. 处理用户的交互
2. JS 解析执行（可以细分为处理 宏任务  所有微任务）
3. 帧开始。窗口尺寸变更，页面滚去等的处理
4. rAF(requestAnimationFrame)
5. 布局
6. 绘制
react以前的渲染就是因为js的执行时间太长了（包括dom diff）

所以说如何在一针之内减少js的执行就是react接下来所做的工作

解决方案
把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行。 这种策略叫做 Cooperative Scheduling（合作式调度），操作系统常用任务调度策略之一。

所以说react把事件定义了一些优先级 并且在每次渲染的时候会去获取还剩余多少时间渲染 通过一个api requestIdleCallback来在剩余时间进行干一些事情（）异步 类似于正玄波

在帧与帧的空余时间 浏览器会调用requestIdleCallback进行一些额外处理。

低优先级任务由requestIdleCallback处理；
高优先级任务，如动画相关的由requestAnimationFrame处理；（从图中可以看出raf在渲染之前）
requestIdleCallback可以在多个空闲期调用空闲期回调，执行任务；
requestIdleCallback方法提供 deadline，即任务执行限制时间，以切分任务，避免长时间执行，阻塞UI渲染而导致掉帧；

## 什么是 Fiber
为了解决之前提到解决方案遇到的问题，提出了以下几个目标：

暂停工作，稍后再回来。
为不同类型的工作分配优先权。
重用以前完成的工作。
如果不再需要，则中止工作。

为了做到这些，我们首先需要一种方法将任务分解为单元。从某种意义上说，这就是 Fiber，Fiber 代表一种工作单元。
但是仅仅是分解为单元也无法做到中断任务，因为函数调用栈就是这样，每个函数为一个工作，每个工作被称为堆栈帧，它会一直工作，直到堆栈为空，无法中断。
所以我们需要一种增量渲染的调度，那么就需要重新实现一个堆栈帧的调度，这个堆栈帧可以按照自己的调度算法执行他们。另外由于这些堆栈是可以自己控制的，所以可以加入并发或者错误边界等功能。
因此 Fiber 就是重新实现的堆栈帧，本质上 Fiber 也可以理解为是一个虚拟的堆栈帧，将可中断的任务拆分成多个子任务，通过按照优先级来自由调度子任务，分段更新，从而将之前的同步渲染改为异步渲染。
所以我们可以说 Fiber 是一种数据结构(堆栈帧)，也可以说是一种解决可中断的调用任务的一种解决方案，它的特性就是时间分片(time slicing)和暂停(supense)。

或者简单说 fiber就是一种调度机制，通过链表的形式存储了各个渲染节点fiber节点 通过上面提到的requestIdleCallback对于人物拆分成几个单元，对于高优先级的优先处理。低优先级的允许打断后续重新进行执行。它的特性就是时间分片(time slicing)和暂停(supense)。


### fiber是如何工作的
1. ReactDOM.render() 和 setState 的时候开始创建更新。
2. 将创建的更新加入任务队列，等待调度。
3. 在 requestIdleCallback 空闲时执行任务。
4. 从根节点开始遍历 Fiber Node，并且构建 WokeInProgress Tree。
5. 生成 effectList。
6. 根据 EffectList 更新 DOM。

**1简单说就是在render phase阶段**
1. 从render开始，把react.element转化为fiber节点（以前的react是用过虚拟dom来表示树形结构，fiber node节点其实跟之前的虚拟dom类型，只是维护了更多的信息并且通过链表的形式维护节点之间的关系），并且设置优先级然后推入更新队列之中。
2. 第二步分就是开始通过fiber进行scheduleWork、requestWork、performWork，即安排工作、申请工作、正式工作三部曲。在这里会通过上面的requesIdeCallback获取剩余的时间。通过时间分片，把高优先级的任务先推入任务中。这一步之前是render阶段（都有能被高优先级的任务进行打断）

### fiber node
fiber中保留了当前节点的父级子集以及兄弟节点的fiber节点。在上面中通过链表的形式生成相应的虚拟dom节点。具体方法在下面
{
  ...
  // 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）
  stateNode: any,

    // 单链表树结构
  return: Fiber | null,// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回
  child: Fiber | null,// 指向自己的第一个子节点
  sibling: Fiber | null,  // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点

  // 更新相关
  pendingProps: any,  // 新的变动带来的新的props
  memoizedProps: any,  // 上一次渲染完成之后的props
  updateQueue: UpdateQueue<any> | null,  // 该Fiber对应的组件产生的Update会存放在这个队列里面
  memoizedState: any, // 上一次渲染的时候的state

  // Scheduler 相关
  expirationTime: ExpirationTime,  // 代表任务在未来的哪个时间点应该被完成，不包括他的子树产生的任务
  // 快速确定子树中是否有不在等待的变化
  childExpirationTime: ExpirationTime,

 // 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber
  // 我们称他为`current <==> workInProgress`
  // 在渲染完成之后他们会交换位置
  alternate: Fiber | null,

  // Effect 相关的
  effectTag: SideEffectTag, // 用来记录Side Effect
  nextEffect: Fiber | null, // 单链表用来快速查找下一个side effect
  firstEffect: Fiber | null,  // 子树中第一个side effect
  lastEffect: Fiber | null, // 子树中最后一个side effect
  ....
};


Stack 在执行时是以一个 tree 为单位处理；Fiber 则是以一个 fiber 的单位执行。Stack 只能同步的执行；Fiber 则可以针对该 Fiber 做调度处理。也就是说，假设现在有个 Fiber 其单链表（Linked List）结构为 A → B → C，当 A 执行到 B 被中断的话，可以之后再次执行 B → C，这对 Stack 的同步处理结构来说是很难做到的。

重要-------
第一个阶段主要工作是自顶向下构建一颗完整的 Fiber Tree， 在 rerender 的过程中，根据之前生成的树，构建名为 workInProgress 的 Fiber Tree 用于更新操作。

因为我需要对 Item 里面的数值做平方运算，于是我点击了 Button，react 根据之前生成的 Fiber Tree 开始构建workInProgress Tree。在构建的过程中，以一个 fiber 节点为单位自顶向下对比，如果发现根节点没有发生改变，根据其 child 指针，把 List 节点复制到 workinprogress Tree 中。 每处理完一个 fiber 节点，react 都会检查当前时间片是否够用，如果发现当前时间片不够用了，就是会标记下一个要处理的任务优先级，根据优先级来决定下一个时间片要处理什么任务。


简单说就是 通过链表来表示组件的属性结构
其中child表示子节点 sibling表示兄弟节点 return表示父节点机
在fiber的算法中是通过父节点 深度优先 会先从父节点一路查找子节点 并且赋值给当前current变量并进行操作  然后继续找到第一层树形结构的子节点 直到没有子节点之后查找兄弟节点 继续执行操作
 当兄弟节点也执行完work之后会通过return属性值回到父节点然后执行父节点的sibling 就这样一直下去
 react通过这种算法来模拟调用栈的形式 但是可以随时进行打断 因为只有一个调用栈 每次执行的都是current（子节点或者兄弟节点会复制给current）
 执行操作完成
function walk(o) {
    let root = o;
    let current = o;

    while (true) {
        // perform work for a node, retrieve & link the children
        let child = doWork(current);

        // if there's a child, set it as the current active node
        if (child) {
            current = child;
            continue;
        }

        // if we've returned to the top, exit the function
        if (current === root) {
            return;
        }

        // keep going up until we find the sibling
        while (!current.sibling) {

            // if we've returned to the top, exit the function
            if (!current.return || current.return === root) {
                return;
            }

            // set the parent as the current active node
            current = current.return;
        }

        // if found, set the sibling as the current active node
        current = current.sibling;
    }
}
当 render 的时候有了这么一条单链表，当调用 setState 的时候又是如何 Diff 得到 change 的呢？
采用的是一种叫双缓冲技术（double buffering），这个时候就需要另外一颗树：WorkInProgress Tree，它反映了要刷新到屏幕的未来状

//当开始进行diff的时候会。有一个workinprogress的属性保留了上一次的fiber节点,在diff完成在之后旧的树会丢弃掉然后重新指向新的fiber节点。在对比的过程中，如果发现fiber发生了改变。那么会搭上一个tag然后把变化推送到effectlist中。比对完成之后把当前的workinginprogess tree指向新的fibertree 旧的直接丢掉了。后续在commit阶段通过之前的sideEffects进行渲染操作
workInProgress
----------------------------------划分线---------------------------------------
在上面的阶段中称为render阶段，生成虚拟dom节点。在 reconciliation 阶段的每个工作循环中，每次处理一个 Fiber，处理完可以中断/挂起整个工作循环。通过每个节点更新结束时向上归并 Effect List 来收集任务结果，reconciliation 结束后，根节点的 Effect List里记录了包括 DOM change 在内的所有 Side Effect。都会检查剩余的时间。如果有高优先级的任务进来了那么当前的任务会被打断，然后悠闲执行高优先级的任务。等到有空闲的时候在重新开始执行。
在打断的时候如何把高优先级的任务先进性处理呢？
解决办法是: 所有更新任务按照顺序插入一个队列, 状态必须按照插入顺序进行计算，但任务可以按优先级顺序执行。
简单说就是队列可以按插入顺序进行计算，但是在最终通过插入任务执行的时候通过优先级
https://juejin.im/post/5d12c907f265da1b6d4033c5
https://juejin.im/post/5e1e9f33f265da3e2c247176#heading-0

--- 接下来整理一下fiber的渲染流程
在第一次渲染时会把react.crateElement转化成一个个fiber节点，这一个个fiber节点最终生成一个完整的fiberTree。初次渲染的时候会根据前面生成的fiberTree生成workinProghressTree进行后续的渲染以及更新操作。
在后续更新或者setState的过程中，会生成新的一个fiberTree。这时候会通过

最后在描述一下整体的任务调度流程

1、任务根据优先级和加入时的当前时间来确定过期时间
2、任务根据过期时间加入任务链表
3、任务链表有两种情况会启动任务的调度，1是任务链表从无到有时，2是任务链表加入了新的最高优先级任务时。
4、任务调度指的是在合适的时机去执行任务，这里通过requestAnimationFrame和messageChannel来模拟
5、requestAnimationFrame回调在帧首执行，用来计算当前帧的截止时间并开启递归，messageChannel的回调在帧末执行，根据当前帧的截止时间、当前时间、任务链表第一个任务的过期时间来决定当前帧是否执行任务（或是到下一帧执行）
6、如果执行任务，则根据任务是否过期来确定如何执行任务。任务过期的话就会把任务链表内过期的任务都执行一遍直到没有过期任务或者没有任务；任务没过期的话，则会在当前帧过期之前尽可能多的执行任务。最后如果还有任务，则回到第5步，放到下一帧再重新走流程。

作者：嫌疑犯X
链接：https://juejin.im/post/5c61197ff265da2d9e173337
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
